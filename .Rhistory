rmse <- sqrt(mean(x^2))
return(rmse)
}
## Running the optimizing toolbox
# lower and upper bound
lower = log10(c(1e-7, 1e-2, 1e+0, 1e-1))
upper = log10(c(1e-3, 1e+2, 1e+2, 1e+2))
# optimizer setting
myOptions <- DEoptim.control(itermax = 10000, steptol = 50, reltol = 1e-8)
# fit the model by calling the optimizer and cost function
fit <- do.call("DEoptim", list(myCostFn, lower, upper, myOptions))
# visualize the results
bestPar <- fit$optim$bestmem # parameter estimates in log 10 scale
names(bestPar) <- myParams
out <- ode(myStates, modelTime, myModel, 10^bestPar)
plot(out[, "time"], log10(out[, "V"]), type = "l") # in log 10
points(myData$time, myData$V)
fluCost <- function (bestPar) {
out <- ode(myStates, modelTime, myModel, 10^bestPar)
return(cost <- modCost(model = out, obs = myData))
}
fluCost(bestPar)$model
Sfun <- sensFun(fluCost, 10^bestPar)
summary(Sfun)
pairs(Sfun,which=c("V"),col=c("blue"))
Sfun <- sensFun(fluCost, bestPar)
summary(Sfun)
pairs(Sfun,which=c("V"),col=c("blue"))
bestPar
# plot
par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
plot(out[, "time"], log10(out[, "V"]), type = "l") # in log 10
points(myData$time, myData$V)
# plot
par(mfrow = c(2, 3))
plot(out[, "time"], log10(out[, "V"]), type = "l") # in log 10
points(myData$time, myData$V)
# plot
par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
# plot
par(mfrow = c(2, 3))
plot(Sfun, which = c("V"))
# plot
par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
View(Sfun)
# plot
par(mfrow = c(2, 3))
## the sensitivity parameters
parRanges <- data.frame(min = lower, max = upper)
rownames(parRanges) <- myParams
parRanges
tout <- 0:10
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[2,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[3,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
par()
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 20))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 0))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
# plot
mf <- par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
## the sensitivity parameters
parRanges <- data.frame(min = lower, max = upper)
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 0))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
# plot
mf <- par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
## the sensitivity parameters
parRanges <- data.frame(min = lower, max = upper)
rownames(parRanges) <- myParams
parRanges
tout <- 0:10
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 0))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
fluCost <- function (bestPar) {
out <- ode(myStates, modelTime, myModel, 10^bestPar)
return(cost <- modCost(model = out, obs = myData))
}
fluCost(bestPar)$model
Sfun <- sensFun(fluCost, bestPar)
summary(Sfun)
pairs(Sfun,which=c("V"),col=c("blue"))
# plot
mf <- par(mfrow = c(2, 3))
plot(Sfun, which = c("V"), type = "l", lwd = 2)
## the sensitivity parameters
parRanges <- data.frame(min = lower, max = upper)
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
parRanges
bestPar
tr(bestPar)
## the sensitivity parameters
10^bestPar
## the sensitivity parameters
log10(0.5(10^bestPar))
## the sensitivity parameters
log10(0.5*(10^bestPar))
## the sensitivity parameters
log10(0.5*(10^bestPar))[1,]
## the sensitivity parameters
log10(0.5*(10^bestPar))[1,:]
## the sensitivity parameters
log10(0.5*(10^bestPar))[1,]
## the sensitivity parameters
(log10(0.5*(10^bestPar)))[1,]
## the sensitivity parameters
log10(0.5*(10^bestPar))
parRanges <- data.frame(min = log10(0.5*(10^bestPar)), max = upper)
rownames(parRanges) <- myParams
parRanges
## the sensitivity parameters
parRanges <- data.frame(min = log10(0.5*(10^bestPar)), max = log10(1.5*(10^bestPar)))
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
## the sensitivity parameters
parRanges <- data.frame(min = log10(0.8*(10^bestPar)), max = log10(1.2*(10^bestPar)))
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
## the sensitivity parameters
parRanges <- data.frame(min = log10(0.8*(10^bestPar)), max = log10(1.2*(10^bestPar)))
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
## Plot all variables; plot mean +- sd, min max
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 3))
plot(Sens, log = "y", xlab = "time, day", ylab = "V",
main = "Sensitivity to Beta", mfrow = NULL)
par(mf)
bestPar
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to Beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[2,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to Delta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[3,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to p", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
View(Sens)
title("My 'Title' in a strange place", line = -21, outer = TRUE)
title("My 'Title' in a strange place", line = 21, outer = TRUE)
title("My 'Title' in a strange place", line = -30, outer = TRUE)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -30, outer = TRUE)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -20, outer = TRUE)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE, font = 5)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE, font = 10)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE, font = 20)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE, font = 2)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE, font = 1)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "grid",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE)
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
title("My 'Title' in a strange place", line = -1, outer = TRUE)
## the sensitivity parameters
parRanges <- data.frame(min = log10(0.5*(10^bestPar)), max = log10(1.5*(10^bestPar)))
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to beta", mfrow = NULL)
## the sensitivity parameters
parRanges <- data.frame(min = log10(0.8*(10^bestPar)), max = log10(1.2*(10^bestPar)))
rownames(parRanges) <- myParams
parRanges
tout <- modelTime
## sensitivity to V; equally-spaced parameters ("grid")
solveFlu <- function(pars) {
derivs <- function(t,state,pars) { # returns rate of change
with (as.list(c(state,pars)), {
dU = - myBeta*U*V
dI = myBeta*U*V - myDelta*I
dV = myP*I - myC*V
return(list(c(dU, dI, dV)))
})
}
state <- c(U = 10^6, I = 0, V = 10)
tout <- seq(from = 0, to = 10, by = 0.01)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = 10^pars)))
}
## Plot all variables; plot mean +- sd, min max
mf <- par(mfrow = c(2, 2))
bestPar
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[1,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to beta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[2,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to delta", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[3,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to p", mfrow = NULL)
Sens <- summary(sensRange(func = solveFlu, parms = bestPar, dist = "unif",
sensvar = c("V"), parRange = parRanges[4,], num = 10))
plot(Sens, log = "y", xlab = "Time (days)", ylab = "log10V",
main = "Sensitivity to c", mfrow = NULL)
par(mf)
View(myData)
title("Viral load sensitivity (varying the respective parameter by 20%)", line = -1, outer = TRUE)
